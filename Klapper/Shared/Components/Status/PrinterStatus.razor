@using Klapper.Data
@using System.Timers
@using Klapper.Classes
@inject PrinterStatusService StatusService

@if (StatusService.PrinterStatus != null)
{
    <div class="row pb-2">
        <div class="col-md-2 pb-2">
            <div class="card">
                <div class="card-body">
                    <h2 class="card-title text-center">Printer Status</h2>
                </div>
                <div class="card-footer text-center">
                    <strong>@StatusService.PrinterStatus.status.print_stats.state</strong>
                </div>
            </div>
        </div>
        <div class="col-auto pb-2">
            @if (StatusService.PrinterStatus.status.print_stats.state != "standby")
            {
                var progress = StatusService.PrinterStatus.status.virtual_sdcard.GetProgress;

                <div class="card">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-2 me-2">
                                <CircularProgressBar ProgressValue="@progress"></CircularProgressBar>
                            </div>
                            @if (StatusService.PrintFileDetails != null)
                            {
                                <div class="col-md-6 mt-4">
                                    <h2>@StatusService.PrintFileDetails.filename</h2>
                                    <div>
                                        <h6>
                                            Layer
                                            <strong>@StatusService.PrintFileDetails.GetLayer(StatusService.GcodeMove.gcode_position[2])</strong> of
                                            <strong>@StatusService.PrintFileDetails.layer_count</strong>
                                        </h6>
                                    </div>
                                    <div>
                                        <h6>
                                            Print time:
                                            <strong>@StatusService.PrinterStatus.status.print_stats.GetPrintDuration()</strong> Out of
                                            <strong>@StatusService.PrintFileDetails.GetEstimatedTime()</strong> (estimated)
                                        </h6>
                                    </div>
                                    <div>
                                        <h6>
                                            Flow Rate:
                                            <strong></strong> Out of
                                            <strong></strong> (estimated)
                                        </h6>
                                    </div>
                                    <div>
                                        <h6>
                                            Speed:
                                            <strong>@(StatusService.GcodeMove?.speed * StatusService.GcodeMove?.speed_factor / 60)</strong> mm/s
                                        </h6>
                                    </div>
                                </div>
                            }
                            @if (!string.IsNullOrEmpty(StatusService.PrintFileDetails.Base64Image))
                            {
                                <div class="col-md-2 text-center">
                                    <div class="d-flex flex-column flex-lg-row">
                                        <img src="data:image/bmp;base64, @(StatusService.PrintFileDetails.Base64Image)" alt=""/>
                                    </div>
                                </div>
                            }
                            <div class="col-md-2 mt-2">
                                @if (StatusService.PrinterStatus.status.print_stats.state is "printing" or "paused")
                                {
                                    <div class="btn-group" role="group">
                                        @if (StatusService.PrinterStatus.status.print_stats.state is "printing")
                                        {
                                            <button type="button" class="btn btn-secondary" @onclick="OnPausePrint">Pause</button>
                                        }
                                        else
                                        {
                                            <button type="button" class="btn btn-secondary" @onclick="OnResumePrint">Resume</button>
                                        }
                                        <button type="button" class="btn btn-secondary btn-danger" @onclick="OnCancelPrint">Cancel</button>
                                    </div>
                                }
                                @if (StatusService.PrinterStatus.status.print_stats.state is "cancelled")
                                {
                                    <button type="button" class="btn btn-secondary" @onclick="OnClearPrint">Clear</button>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code
{
    [Parameter]
    public Action OnPausePrint { get; set; }

    [Parameter]
    public Action OnCancelPrint { get; set; }

    [Parameter]
    public Action OnResumePrint { get; set; }

    [Parameter]
    public Action OnClearPrint { get; set; }

    private bool DisableCancelButton { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await StatusService.ForceRefreshAll();

        SetUIRefreshTimer();

        await base.OnInitializedAsync();
    }

    private void SetUIRefreshTimer()
    {
        var timer = new Timer(2000);
        timer.Elapsed += async (_, _) => { await InvokeAsync(StateHasChanged); };
        timer.AutoReset = true;
        timer.Enabled = true;
    }
}