@using Klapper.Data
@using System.Timers
@inject PrinterStatusService StatusService

@if (StatusService.PrinterStatus != null)
{
    <div class="row pb-2">
        <!-- <div class="col-md-1 pb-2">
            <div class="card">
                <div class="card-body">
                    <h2 class="card-title text-center">Printer Status</h2>
                </div>
                <div class="card-footer text-center">
                    <strong>@StatusService.PrinterStatus.status.print_stats.state</strong>
                </div>
            </div>
        </div> -->
        @if (StatusService.PrinterStatus.status.print_stats.state != "standby")
        {
            var progress = StatusService.PrinterStatus.status.virtual_sdcard.GetProgress;

            <div class="card">
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3 me-2">
                            <CircularProgressBar ProgressValue="@progress"></CircularProgressBar>
                        </div>
                        @if (StatusService.PrintFileDetails != null && StatusService.GcodeMove != null && StatusService.Toolhead != null)
                        {
                            <div class="col-md-6 mt-4">
                                <h2>@StatusService.PrintFileDetails.filename</h2>
                                <div>
                                    <h6>
                                        Layer
                                        <strong>@StatusService.PrintFileDetails.GetLayer(StatusService.GcodeMove.gcode_position[2])</strong> of
                                        <strong>@StatusService.PrintFileDetails.layer_count</strong>
                                    </h6>
                                </div>
                                <div>
                                    <h6>
                                        Print time:
                                        <strong>@StatusService.PrinterStatus.status.print_stats.GetPrintDuration()</strong> Out of
                                        <strong>@StatusService.PrintFileDetails.GetEstimatedTime()</strong> (estimated)
                                    </h6>
                                </div>
                                <div>
                                    <h6>
                                        Flow Rate:
                                        <strong>@StatusService.PrintFileDetails.GetFlow((double)(StatusService.GcodeMove?.speed * StatusService.GcodeMove?.speed_factor / 60)).ToString("n1")</strong> mm&#179;/s (estimated)
                                    </h6>
                                </div>
                                <div>
                                    <h6>
                                        Extruder Speed:
                                        <strong>@StatusService.PrintFileDetails.GetExtruderSpeed((double)(StatusService.GcodeMove?.position[3])).ToString("n1")</strong> mm6/s
                                    </h6>
                                </div>
                                <div>
                                    <h6>
                                        Speed:
                                        <strong>@((StatusService.GcodeMove?.speed * StatusService.GcodeMove?.speed_factor / 60).Value.ToString("n1"))</strong> mm/s
                                    </h6>
                                </div>
                            </div>
                        }
                        @if (!string.IsNullOrEmpty(StatusService.PrintFileDetails?.Base64Image))
                        {
                            <div class="col-md-2 text-center">
                                <div class="d-flex flex-column flex-lg-row">
                                    <img src="data:image/bmp;base64, @(StatusService.PrintFileDetails.Base64Image)" alt=""/>
                                </div>
                            </div>
                        }
                        <div class="col-md-2 mt-2">
                            @if (StatusService.PrinterStatus.status.print_stats.state is "printing" or "paused")
                            {
                                <div class="btn-group" role="group">
                                    @if (StatusService.PrinterStatus.status.print_stats.state is "printing")
                                    {
                                        <button type="button" disabled="@(IsAwaitingOperation || StatusService.PrinterStatus.status.print_stats.state == "paused")" class="btn btn-secondary" @onclick="async () => { IsAwaitingOperation = true; await OnPausePrint(); await Task.Delay(2000); IsAwaitingOperation = false;}">Pause</button>
                                    }
                                    else
                                    {
                                        <button type="button" disabled="@IsAwaitingOperation" class="btn btn-secondary" @onclick="async () => { IsAwaitingOperation = true; await OnResumePrint(); await Task.Delay(2000); IsAwaitingOperation = false;}">Resume</button>
                                    }
                                    <button type="button" disabled="@IsAwaitingOperation" class="btn btn-secondary btn-danger" @onclick="async () => { IsAwaitingOperation = true; await OnCancelPrint(); await Task.Delay(2000); IsAwaitingOperation = false;}">Cancel</button>
                                </div>
                            }
                            @if (StatusService.PrinterStatus.status.print_stats.state is "cancelled" or "complete")
                            {
                                <button type="button" disabled="@IsAwaitingOperation" class="btn btn-secondary" @onclick="async () => { IsAwaitingOperation = true; await OnClearPrint(); await Task.Delay(2000); IsAwaitingOperation = false;}">Clear</button>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code
{
    [Parameter]
    public Func<Task>? OnPausePrint { get; set; }

    [Parameter]
    public Func<Task>? OnCancelPrint { get; set; }

    [Parameter]
    public Func<Task>? OnResumePrint { get; set; }

    [Parameter]
    public Func<Task>? OnClearPrint { get; set; }

    private bool IsAwaitingOperation { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await StatusService.ForceRefreshAll();

        GetSetUiRefreshTimer();

        await base.OnInitializedAsync();
    }

    private void GetSetUiRefreshTimer()
    {
        var timer = new Timer(500);
        timer.Elapsed += async (_, _) =>
        {
            await StatusService.GetGcodeMoveToolHead();
            await InvokeAsync(StateHasChanged);
            timer.Start();
        };
        timer.AutoReset = false;
        timer.Enabled = true;
    }
}