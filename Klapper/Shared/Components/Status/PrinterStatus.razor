@using Klapper.Data
@using System.Timers
@inject PrinterStatusService StatusService

@if (StatusService.PrinterStatus != null)
{
    <div class="border p-3 mt-4">
        <div class="row">
            <h2 class="text-primary">Printer Status</h2>
        </div>
        <div class="row">
            <div class="col-md-2">
                <h4>
                    <strong>Status:</strong> @StatusService.PrinterStatus.status.print_stats.state
                </h4>
                <br/>
                @if (StatusService.PrinterStatus.status.print_stats.state != "standby")
                {
                    <strong>File Name:</strong>
                    @StatusService.PrinterStatus.status.print_stats.filename
                }
            </div>
            <div class="col-md-2">
                @if (StatusService.PrinterStatus.status.print_stats.state is "printing" or "paused")
                {
                    <div class="btn-group" role="group">
                        @if (StatusService.PrinterStatus.status.print_stats.state is "printing")
                        {
                            <button type="button" class="btn btn-secondary" @onclick="OnPausePrint">Pause</button>
                        }
                        else
                        {
                            <button type="button" class="btn btn-secondary" @onclick="OnResumePrint">Resume</button>
                        }
                        <button type="button" class="btn btn-secondary btn-danger" @onclick="OnCancelPrint">Cancel</button>
                    </div>
                }
            </div>
            @if (StatusService.PrinterStatus.status.print_stats.state is "printing" or "paused")
            {
                var progress = $"{StatusService.PrinterStatus.status.virtual_sdcard.GetProgress}%";
                <div class="progress">
                    <div class="progress-bar progress-bar-striped progress-bar-animated" style="width: @progress">@progress</div>
                </div>
            }
        </div>
    </div>
}

@code
{
    [Parameter]
    public Action OnPausePrint { get; set; }

    [Parameter]
    public Action OnCancelPrint { get; set; }

    [Parameter]
    public Action OnResumePrint { get; set; }

    private bool DisableCancelButton { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await StatusService.ForceRefreshAll();

        SetUIRefreshTimer();

        await base.OnInitializedAsync();
    }

    private void SetUIRefreshTimer()
    {
        var timer = new Timer(2000);
        timer.Elapsed += async (sender, args) => { await InvokeAsync(StateHasChanged); };
        timer.AutoReset = true;
        timer.Enabled = true;
    }
}