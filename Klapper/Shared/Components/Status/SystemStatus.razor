@using Klapper.Data
@using System.Timers
@inject MoonrakerApiService Api;

<div class="card">
    <div class="card-body">
        <h2 class="card-title text-center">@StatusName</h2>
    </div>
    <div class="card-footer text-center">

        @if (StatusText == "OK")
        {
            <span class="oi oi-circle-check" style="color: @StatusColor" aria-hidden="true"></span>
        }
        else
        {
            <span class="oi oi-circle-x" style="color: @StatusColor" aria-hidden="true"></span>
        }
        &nbsp; <strong>@StatusText</strong>
    </div>
</div>

@code {

    [Parameter]
    public string StatusName { get; set; }

    public string StatusColor { get; set; } = "#FFCCCC";

    public string StatusText { get; set; }

    public string[] StatusColors = { "#E57373", "#FFEE58", "#66BB6A" };

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
        SetAutoRefresh();
        await base.OnInitializedAsync();
    }

    private void SetAutoRefresh()
    {
    // Create a timer with a two second interval.
        var timer = new Timer(2000);
    // Hook up the Elapsed event for the timer. 
        timer.Elapsed += async (_, _) =>
        {
            await RefreshData();
            await InvokeAsync(StateHasChanged);
			timer.Start();
        };
        timer.AutoReset = false;
        timer.Enabled = true;
    }

    private async Task RefreshData()
    {
        try
        {
            var data = await Api.GetSystemInfoStatus(StatusName);
            if (data.active_state == "active")
            {
                StatusColor = StatusColors[2];
                StatusText = "OK";
            }
            else
            {
                {
                    StatusColor = StatusColors[0];
                    StatusText = $"Error! - {data.sub_state}";
                }
            }
        }
        catch (Exception)
        {
        }
    }

}