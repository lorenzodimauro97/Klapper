@using Klapper.Data
@using System.Timers
@using Klapper.Classes
@using SpanJson
@inject MoonrakerApiService Api;

@if (Sensors != null)
{
    <RadzenChart @ref="Chart">
        @foreach (var sensor in Sensors.Where(sensor => Temperatures.Any(x => x.Item1 == sensor.Name)))
        {
            var temperature = Temperatures.Last(x => x.Item1 == sensor.Name);

            <RadzenLineSeries Data="@temperature.Item2" Title="@temperature.Item1" CategoryProperty="Date" LineType="@LineType.Solid" ValueProperty="temperature">
                <RadzenMarkers MarkerType="@MarkerType.None"/>
            </RadzenLineSeries>
        }
        <RadzenLegend Position="LegendPosition.Top" Visible="false"/>
        <RadzenCategoryAxis Padding="20" FormatString="{0:HH:mm}"/>
        <RadzenValueAxis>
            <RadzenGridLines Visible="true"/>
            <RadzenAxisTitle Text="Temperatures"/>
        </RadzenValueAxis>
    </RadzenChart>
}

@code {

    [Parameter]
    public List<ProductCard> Sensors { get; set; }

    private List<(string, List<Temperature>, string)> Temperatures { get; set; } = new();

    public RadzenChart Chart { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        await InitializeChart();
        SetAutoRefresh();
        await base.OnInitializedAsync();
    }

    private async Task InitializeChart()
    {
        Temperatures = new List<(string, List<Temperature>, string)>();
        if(Chart != null) await Chart.Reload();

        var temperatureHistory = await Api.GetTemperatureHistory();

        foreach (var sensor in Sensors)
        {
            var sensorTemperatureHistory = JsonSerializer.Generic.Utf16.Deserialize<HeatableSensibleTemperatureHistory>(
                JsonOperations.GetJsonElement(temperatureHistory, $"result.{sensor.Name}").ToString());
            
            Temperatures.Add((sensor.Name, new List<Temperature> { new() }, $"{sensor.Name}: 0"));
            
            var temperature = Temperatures.First(x => x.Item1 == sensor.Name);

            for (var i = 900; i < sensorTemperatureHistory.temperatures.Count; i++)
            {
                temperature.Item2.Add(new Temperature
                {
                    Date = DateTime.Now.AddSeconds(-sensorTemperatureHistory.temperatures.Count + i),
                    temperature = sensorTemperatureHistory.temperatures[i]
                });
            }
        }
    }

    private void SetAutoRefresh()
    {
        var timer = new Timer(1000);
        timer.Elapsed += async (_, _) =>
        {
            RefreshData();
            await InvokeAsync(StateHasChanged);
			timer.Start();
        };

        timer.AutoReset = false;
        timer.Enabled = true;
    }

    private void RefreshData()
    {
        if (Temperatures.Count == 0) return;
        foreach (var sensor in Sensors.Where(sensor => Temperatures.Any(x => x.Item1 == sensor.Name)))
        {
            var temperature = Temperatures.First(x => x.Item1 == sensor.Name);

            temperature.Item2.Add(new Temperature(sensor.data));

            if (Temperatures.First(x => x.Item1 == sensor.Name).Item2.Count <= 300) continue;
            temperature.Item2.RemoveRange(0, 2);
        }
    }

}