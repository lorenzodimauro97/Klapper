@using Klapper.Data
@using System.Timers
@inject MoonrakerApiService Api
@inject NotificationService Toast

@if (data != null)
{
    <div class="product-card">
        <div class="card">
            <div class="card-body d-flex flex-row">
                <div class="p-2">@Name</div>
                <div class="vr"></div>
                <div class="p-2">@data.temperature Â°C</div>

                @if (data.IsHeater)
                {
                    <div class="vr"></div>
                    <div class="p-2">@data.GetPowerPercent().ToString(@"n2")%</div>
                    <div class="vr"></div>
                    <div class="p-2">
                        <RadzenNumeric @bind-value="@data.target" TValue="double" Min="0" Max="999" Change=@(OnPowerChange) Style="width: 100px"></RadzenNumeric>
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {

    [Parameter]
    public string Name { get; set; }

    public HeatableSensible? data;

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
        SetAutoRefresh();
        await base.OnInitializedAsync();
    }

    private void SetAutoRefresh()
    {
        var timer = new Timer(200);
        timer.Elapsed += async (_, _) =>
        {
            await RefreshData();
            await InvokeAsync(StateHasChanged);
            timer.Start();
        };
        timer.AutoReset = false;
        timer.Enabled = true;
    }

    private async Task RefreshData()
    {
        try
        {
            data = await Api.GetObject<HeatableSensible>(Name, true);
        }
        catch (Exception)
        {
        }
    }


    private async Task OnPowerChange(double args)
    {
        var result = await Api.RunGCode($"SET_HEATER_TEMPERATURE HEATER={Name} TARGET={args}");

        ToastNotification.Notificate(Toast, result.Item1, "Temperature changed successfully", result.Item2);
    }

}