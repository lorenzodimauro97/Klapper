@using Klapper.Data
@inject MoonrakerApiService Api;
@inject NotificationService Toast;
@inject PrinterStatusService StatusService;


<div class="justify-content-between mb-2 row">
    <div class="col-md-4 pb-2">
        <div class="card">
            <div class="card-body text-center">
                <h2 class="card-title text-center">Move Length</h2>
                <div class="btn-group d-inline-block" role="group">
                    <button type="button" class="btn btn-secondary" @onclick="() => MovementLength = 0.1f">0.1mm</button>
                    <button type="button" class="btn btn-secondary" @onclick="() => MovementLength = 1f">1mm</button>
                    <button type="button" class="btn btn-secondary" @onclick="() => MovementLength = 10f">10mm</button>
                    <button type="button" class="btn btn-secondary" @onclick="() => MovementLength = 20f">20mm</button>
                    <button type="button" class="btn btn-secondary" @onclick="() => MovementLength = 50f">50mm</button>
                    <button type="button" class="btn btn-secondary" @onclick="() => MovementLength = 100f">100mm</button>
                </div>
            </div>
            <div class="card-footer text-center">
                <RadzenSlider @bind-Value="@MovementLength" Step="10" TValue="float" Min="0" Max="500" class="w-75"/>
                @MovementLength
            </div>
        </div>
    </div>
    <div class="col-md-3 text-center pb-2 justify-content-between">
        <div class="btn-group-vertical d-inline-block me-1 ms-1 text-center" role="group">

            <button type="button" class="btn btn-secondary" @onclick="() => Move(0, 1)">+</button>
            <h2>X</h2>
            @if (StatusService.PrinterIsPrinting)
            {
                <h4>@StatusService.Toolhead?.position[0].ToString("n2")</h4>
            }
            <button type="button" class="btn btn-secondary" @onclick="() => Move(0, 0)">-</button>
        </div>
        <div class="btn-group-vertical d-inline-block me-1 ms-1 text-center" role="group">

            <button type="button" class="btn btn-secondary" @onclick="() => Move(1, 1)">+</button>
            <h2>Y</h2>
            @if (StatusService.PrinterIsPrinting)
            {
                <h4>@StatusService.Toolhead?.position[1].ToString("n2")</h4>
            }
            <button type="button" class="btn btn-secondary" @onclick="() => Move(1, 0)">-</button>
        </div>
        <button type="button" class="btn btn-secondary" @onclick="Home">
            <span class="oi oi-home" aria-hidden="true"></span>
        </button>
        <div class="btn-group-vertical d-inline-block me-1 ms-1 text-center" role="group">

            <button type="button" class="btn btn-secondary" @onclick="() => Move(2, 1)">+</button>
            <h2>Z</h2>
            @if (StatusService.PrinterIsPrinting)
            {
                <h4>@StatusService.Toolhead?.position[2].ToString("n2")</h4>
            }
            <button type="button" class="btn btn-secondary" @onclick="() => Move(2, 0)">-</button>
        </div>
        <div class="btn-group-vertical d-inline-block me-1 ms-1 text-center" role="group">
            <button type="button" class="btn btn-secondary" @onclick="() => Move(3, 1)">+</button>
            <h2>E</h2>
            <button type="button" class="btn btn-secondary" @onclick="() => Move(3, 0)">-</button>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card">
            <div class="card-body text-center">
                <h2 class="card-title text-center">Extrusion Distance</h2>
                <div class="btn-group d-inline-block" role="group">
                    <button type="button" class="btn btn-secondary" @onclick="() => ExtrusionDistance = 0.1f">0.1mm</button>
                    <button type="button" class="btn btn-secondary" @onclick="() => ExtrusionDistance = 1f">1mm</button>
                    <button type="button" class="btn btn-secondary" @onclick="() => ExtrusionDistance = 10f">10mm</button>
                    <button type="button" class="btn btn-secondary" @onclick="() => ExtrusionDistance = 20f">20mm</button>
                    <button type="button" class="btn btn-secondary" @onclick="() => ExtrusionDistance = 50f">50mm</button>
                    <button type="button" class="btn btn-secondary" @onclick="() => ExtrusionDistance = 100f">100mm</button>
                </div>
            </div>
            <div class="card-footer text-center">
                <RadzenSlider @bind-Value="@ExtrusionDistance" Step="10" TValue="float" Min="0" Max="@MaxExtrusion" class="w-75"/>
                @ExtrusionDistance
            </div>
        </div>
    </div>
</div>

@code
{
    [Parameter]
    public int MaxExtrusion { get; set; }

    private float ExtrusionDistance { get; set; }
    private float MovementLength { get; set; }

    protected override async Task OnInitializedAsync()
    {
        SetKlipperStatusTimer();

        await base.OnInitializedAsync();
    }

    private void SetKlipperStatusTimer()
    {
        var timer = new System.Timers.Timer(1000);
        timer.Elapsed += async (_, _) =>
        {
            await InvokeAsync(StateHasChanged);
            timer.Start();
        };
        timer.AutoReset = false;
        timer.Enabled = true;
    }

    private async Task Home()
    {
        await Api.RunGCode("G28");
    }

    private async Task Move(int axis, int direction)
    {
        if (MovementLength == 0) return;

        var command = "G1 ";

        switch (axis)
        {
            case 0:
                command += "X";
                break;
            case 1:
                command += "Y";
                break;
            case 2:
                command += "Z";
                break;
            case 3:
                command += "E";
                break;
        }
        switch (direction)
        {
            case 0:
                command += $"-{MovementLength} ";
                break;
            case 1:
                command += $"{MovementLength} ";
                break;
        }

        command += "F5000";

        var result = await Api.RunGCode(command);

        if (!result.Item1)
            ToastNotification.Notificate(Toast, result.Item1, badMessage: result.Item2);
    }
}

<style>
    .card {
      box-shadow: 0 0 10px 0 rgba(100, 100, 100, 0.26);
    }
</style>