@using Klapper.Data
@using Klapper.Classes
@inject MoonrakerApiService Api;
@inject NotificationService Toast;
@inject PrinterStatusService StatusService;


<div class="d-flex @(MobileMode ? "flex-column" : "flex-row")">
    <div class="pb-2">
        <div class="card">
            <div class="card-body text-center">
                <h2 class="card-title text-center">Move Length</h2>
                <div class="btn-group flex-wrap" role="group">
                    <button type="button" class="btn btn-secondary" @onclick="() => MovementLength = 0.1f">0.1mm</button>
                    <button type="button" class="btn btn-secondary" @onclick="() => MovementLength = 1f">1mm</button>
                    <button type="button" class="btn btn-secondary" @onclick="() => MovementLength = 10f">10mm</button>
                    <button type="button" class="btn btn-secondary" @onclick="() => MovementLength = 20f">20mm</button>
                    <button type="button" class="btn btn-secondary" @onclick="() => MovementLength = 50f">50mm</button>
                    <button type="button" class="btn btn-secondary" @onclick="() => MovementLength = 100f">100mm</button>
                </div>
                <div class="d-flex flex-row flex-wrap justify-content-center pt-2">
                    <RadzenNumeric @bind-Value="MovementLength"></RadzenNumeric>
                </div>
            </div>
            <div class="card-footer text-center">
                <RadzenSlider @bind-Value="@MovementLength" Step="0.1" TValue="float" Min="0" Max="500" class="w-50"/>
                @MovementLength mm
                <RadzenSlider @bind-Value="@MovementFeedRate" Step="100" TValue="float" Min="0" Max="8000" class="w-50"/>
                @MovementFeedRate mm/min
            </div>
            <div class="card-body text-center">
                <h2 class="card-title text-center">Extrusion Distance</h2>
                <div class="btn-group flex-wrap" role="group">
                    <button type="button" class="btn btn-secondary" @onclick="() => ExtrusionDistance = 0.1f">0.1mm</button>
                    <button type="button" class="btn btn-secondary" @onclick="() => ExtrusionDistance = 1f">1mm</button>
                    <button type="button" class="btn btn-secondary" @onclick="() => ExtrusionDistance = 10f">10mm</button>
                    <button type="button" class="btn btn-secondary" @onclick="() => ExtrusionDistance = 20f">20mm</button>
                    <button type="button" class="btn btn-secondary" @onclick="() => ExtrusionDistance = 50f">50mm</button>
                    <button type="button" class="btn btn-secondary" @onclick="() => ExtrusionDistance = 100f">100mm</button>
                </div>
                <div class="d-flex flex-row flex-wrap justify-content-center pt-2">
                    <RadzenNumeric @bind-Value="ExtrusionDistance"></RadzenNumeric>
                </div>
            </div>
            <div class="card-footer text-center">
                <RadzenSlider @bind-Value="@ExtrusionDistance" Step="0.1" TValue="float" Min="0" Max="@MaxExtrusion" class="w-50"/>
                @ExtrusionDistance mm
                <RadzenSlider @bind-Value="@ExtrusionFeedRate" Step="100" TValue="float" Min="0" Max="8000" class="w-50"/>
                @ExtrusionFeedRate mm/min
            </div>

        </div>
    </div>
    <div class="d-flex flex-column pb-2 @(MobileMode ? "justify-content-center" : "justify-content-between w-50")">

        <div class="d-flex flex-row justify-content-between">
            <div class="align-self-center pb-2">
                <div style="width: 40px" class="btn-group-vertical d-inline-block me-1 ms-1 text-center" role="group">
                    <button disabled="@IsMoving" type="button" class="btn btn-secondary" @onclick="() => Move(0, 1)">+</button>
                    <button disabled="@IsMoving" type="button" class="btn btn-secondary" @onclick="() => Home(0)">
                        <span class="oi oi-home" aria-hidden="true"></span>X
                    </button>
                    <button disabled="@IsMoving" type="button" class="btn btn-secondary" @onclick="() => Move(0, 0)">-</button>
                </div>
            </div>
            <div class="align-self-center pb-2">
                <div style="width: 40px" class="btn-group-vertical d-inline-block me-1 ms-1 text-center" role="group">
                    <button disabled="@IsMoving" type="button" class="btn btn-secondary" @onclick="() => Move(1, 1)">+</button>
                    <button disabled="@IsMoving" type="button" class="btn btn-secondary" @onclick="() => Home(1)">
                        <span class="oi oi-home" aria-hidden="true"></span>Y
                    </button>
                    <button disabled="@IsMoving" type="button" class="btn btn-secondary" @onclick="() => Move(1, 0)">-</button>
                </div>
            </div>

            <div class="align-self-center pb-2">
                <button style="width: 40px" disabled="@IsMoving" type="button" class="btn btn-secondary" @onclick="() => Home(3)">
                    <span class="oi oi-home" aria-hidden="true"></span>
                </button>
            </div>

            <div class="align-self-center pb-2">
                <div style="width: 40px" class="btn-group-vertical d-inline-block me-1 ms-1 text-center" role="group">

                    <button disabled="@IsMoving" type="button" class="btn btn-secondary" @onclick="() => Move(2, 1)">+</button>
                    <button disabled="@IsMoving" type="button" class="btn btn-secondary" @onclick="() => Home(2)">
                        <span class="oi oi-home" aria-hidden="true"></span>Z
                    </button>
                    <button disabled="@IsMoving" type="button" class="btn btn-secondary" @onclick="() => Move(2, 0)">-</button>
                </div>
            </div>

            <div class="align-self-center pb-2">
                <div style="width: 40px" class="btn-group-vertical d-inline-block me-1 ms-1 text-center" role="group">
                    <button type="button" class="btn btn-secondary" @onclick="() => Move(3, 1)">+</button>
                    <h2 style="height:62px; margin: 0;">E</h2>
                    <button type="button" class="btn btn-secondary" @onclick="() => Move(3, 0)">-</button>
                </div>
            </div>
        </div>
        <div class="text-center justify-content-between">
            @if (StatusService.Toolhead != null)
            {
                <div>
                    X: <strong>@StatusService.Toolhead.position[0].ToString("n2")</strong>
                    &nbsp;
                    Y: <strong>@StatusService.Toolhead.position[1].ToString("n2")</strong>
                    &nbsp;
                    Z: <strong>@StatusService.Toolhead.position[2].ToString("n2")</strong>
                </div>
            }
        </div>
        <div class="d-flex flex-column text-center justify-content-between">
            <Endstops></Endstops>
            <Fans></Fans>
        </div>

    </div>
    <div>
        <div class="card">
            <div class="card-body text-center justify-content-between">
                <h2 class="card-title text-center">Flow</h2>
                <div class="row text-center">
                    <div class="d-flex flex-row justify-content-center align-items-center">
                        <h3 style="padding-right: 10px">@Flow%</h3>
                        <button type="button" class="btn btn-secondary" @onclick="async () => await ChangeFlow(true)">
                            <span class="oi oi-reload" aria-hidden="true"></span>
                        </button>
                    </div>
                    <div class="d-flex flex-row flex-wrap justify-content-center pt-2">
                        <RadzenNumeric @bind-Value="Flow"
                                       TValue="int?"
                                       Change="async () => await ChangeFlow(false)">
                        </RadzenNumeric>
                    </div>
                </div>
            </div>
            <div class="card-footer text-center">
                <RadzenSlider @bind-Value="@Flow" Step="1" TValue="int?" Min="0" Max="200" Change="async () => await ChangeFlow(false)" class="w-75"/>
            </div>
            <div class="card-body text-center justify-content-between">
                <h2 class="card-title text-center">Speed</h2>
                <div class="row text-center">
                    <div class="d-flex flex-row justify-content-center align-items-center">
                        <h3 style="padding-right: 10px">@Speed%</h3>
                        <button type="button" class="btn btn-secondary" @onclick="async () => await ChangeSpeed(true)">
                            <span class="oi oi-reload" aria-hidden="true"></span>
                        </button>
                    </div>
                    <div class="d-flex flex-row flex-wrap justify-content-center pt-2">
                        <RadzenNumeric @bind-Value="Speed"
                                       TValue="int?"
                                       Change="async () => await ChangeSpeed(false)">
                        </RadzenNumeric>
                    </div>
                </div>
            </div>
            <div class="card-footer text-center">
                <RadzenSlider @bind-Value="@Speed" Step="1" TValue="int?" Min="0" Max="200" Change="async () => await ChangeSpeed(false)" class="w-75"/>
            </div>
        </div>
    </div>
</div>

@code
{
    [Parameter]
    public bool MobileMode { get; set; } = false;
    [Parameter]
    public int MaxExtrusion { get; set; }

    private float ExtrusionDistance { get; set; } = 10;
    private float ExtrusionFeedRate { get; set; } = 300;
    private float MovementLength { get; set; } = 10;
    private float MovementFeedRate { get; set; } = 300;

    private bool IsMoving { get; set; }

    private int? Flow
    {
        get => StatusService.GcodeMove != null ? (int)(StatusService.GcodeMove?.extrude_factor * 100) : 0;
        set { StatusService.GcodeMove.extrude_factor = (double)value / 100; }
    }

    private int? Speed
    {
        get => StatusService.GcodeMove != null ? (int)(StatusService.GcodeMove?.speed_factor * 100) : 0;
        set { StatusService.GcodeMove.speed_factor = (double)value / 100; }
    }

    protected override async Task OnInitializedAsync()
    {
        SetKlipperStatusTimer();

        await base.OnInitializedAsync();
    }

    private void SetKlipperStatusTimer()
    {
        var timer = new System.Timers.Timer(2000);
        timer.Elapsed += async (_, _) =>
        {
            await InvokeAsync(StateHasChanged);
            timer.Start();
        };
        timer.AutoReset = false;
        timer.Enabled = true;
    }

    private async Task ChangeFlow(bool reset)
    {
        if (reset) await Api.RunGCode($"M221 S100");
        else
            await Api.RunGCode($"M221 S{Flow}");
    }

    private async Task ChangeSpeed(bool reset)
    {
        if (reset) await Api.RunGCode($"M220 S100");
        else
            await Api.RunGCode($"M220 S{Speed}");
    }

    private async Task Home(int i)
    {
        IsMoving = true;
        var command = SpecialGCodeCommands.Home;

        switch (i)
        {
            case 0:
                command += " X";
                break;
            case 1:
                command += " Y";
                break;
            case 2:
                command += " Z";
                break;
        }
        await Api.RunGCode(command);
        IsMoving = false;
    }

    private async Task Move(int axis, int direction)
    {
        IsMoving = true;

        var command = "G1 ";

        switch (axis)
        {
            case 0:
                command += "X";
                break;
            case 1:
                command += "Y";
                break;
            case 2:
                command += "Z";
                break;
            case 3:
                command += "E";
                break;
        }

        var length = axis == 3 ? ExtrusionDistance : MovementLength;

        switch (direction)
        {
            case 0:
                command += $"-{length} ";
                break;
            case 1:
                command += $"{length} ";
                break;
        }

        command += axis == 3 ? $"F{ExtrusionFeedRate}" : $"F{MovementFeedRate}";

        await Api.RunGCode("G91");

        var result = await Api.RunGCode(command);

        await Api.RunGCode("G90");

        if (!result.Item1)
            ToastNotification.Notificate(Toast, result.Item1, badMessage: result.Item2);
        IsMoving = false;
    }
}

<style>
    .card {
      box-shadow: 0 0 10px 0 rgba(100, 100, 100, 0.26);
    }
</style>