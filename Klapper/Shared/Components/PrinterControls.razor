@using Klapper.Data
@inject MoonrakerApiService Api;
@inject NotificationService Toast

<div class="border p-3 mt-4">
    <div class="row">
        <h2 class="text-primary">Printer Controls</h2>
    </div>
    <div class="justify-content-between mb-2 row">
        <div class="col-md-5 mb-2">
            <div class="card">
                <div class="card-body">
                    <h2 class="card-title text-center">Move Length</h2>
                </div>
                <div class="card-footer text-center">
                    <RadzenSlider @bind-Value="@MovementLength" Step="10" TValue="int" Min="0" Max="500" class="w-75"/>
                    @MovementLength
                </div>
            </div>
        </div>
        <div class="col-md-5">
            <div class="card">
                <div class="card-body">
                    <h2 class="card-title text-center">Extrusion Distance</h2>
                </div>
                <div class="card-footer text-center">
                    <RadzenSlider @bind-Value="@ExtrusionDistance" Step="10" TValue="int" Min="0" Max="@MaxExtrusion" class="w-75"/>
                    @ExtrusionDistance
                </div>
            </div>
        </div>
    </div>
    <div class="justify-content-between row">
        <div class="col-md-1 mb-2 text-center">
            <div class="btn-group-vertical d-inline-block text-center" role="group">
                <button type="button" class="btn btn-secondary" @onclick="() => Move(0, 1)">+</button>
                <h2>X</h2>
                <button type="button" class="btn btn-secondary" @onclick="() => Move(0, 0)">-</button>
            </div>
        </div>
        <div class="col-md-1 mb-2 text-center">
            <div class="btn-group-vertical d-inline-block text-center" role="group">
                <button type="button" class="btn btn-secondary" @onclick="() => Move(1, 1)">+</button>
                <h2>Y</h2>
                <button type="button" class="btn btn-secondary" @onclick="() => Move(1, 0)">-</button>
            </div>
        </div>
        <div class="col-md-1 mb-2 text-center align-items-center d-flex justify-content-center">
            <button type="button" class="btn btn-secondary" @onclick="Home">
                <span class="oi oi-home" aria-hidden="true"></span>
            </button>
        </div>
        <div class="col-md-1 mb-2 text-center">
            <div class="btn-group-vertical d-inline-block text-center" role="group">
                <button type="button" class="btn btn-secondary" @onclick="() => Move(2, 1)">+</button>
                <h2>Z</h2>
                <button type="button" class="btn btn-secondary" @onclick="() => Move(2, 0)">-</button>
            </div>
        </div>
        <div class="col-md-1 mb-2 text-center">
            <div class="btn-group-vertical d-inline-block text-center" role="group">
                <button type="button" class="btn btn-secondary" @onclick="() => Move(3, 1)">+</button>
                <h2>E</h2>
                <button type="button" class="btn btn-secondary" @onclick="() => Move(3, 0)">-</button>
            </div>
        </div>
    </div>
</div>

@code
{
    [Parameter]
    public int MaxExtrusion { get; set; }

    private int ExtrusionDistance { get; set; }
    private int MovementLength { get; set; }

    private async Task Home()
    {
        await Api.RunGCode("G28");
    }

    private async Task Move(int axis, int direction)
    {
        if(MovementLength == 0) return;
        
        var command = "G1 ";

        switch (axis)
        {
            case 0:
                command += "X";
                break;
            case 1:
                command += "Y";
                break;
            case 2:
                command += "Z";
                break;
            case 3:
                command += "E";
                break;
        }
        switch (direction)
        {
            case 0:
                command += $"-{MovementLength} ";
                break;
            case 1:
                command += $"{MovementLength} ";
                break;
        }

        command += "F5000";

        var result = await Api.RunGCode(command);
        
        if(!result.Item1)
        Toast.Notify(new NotificationMessage
        {
            Severity = NotificationSeverity.Error,
            Detail = result.Item2,
            Summary = "Error",
            Duration = 7000
        });
    }
}

<style>
    .card {
      box-shadow: 0 0 10px 0 rgba(100, 100, 100, 0.26);
    }
</style>