@using Klapper.Data
@using Klapper.Classes
@inject MoonrakerApiService Api
@inject NotificationService Toast
@inject DialogService DialogService

<RadzenButton Text="Refresh" Click="@RefreshData" Style="margin-bottom: 10px;"/>

@if (GCodeFiles?.Count > 0)
{
    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" AllowSorting="true"
                    Data="@GCodeFiles" TItem="GCodeFileDetails" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" RowSelect="ShowInlineDialog">
        <Columns>
            <RadzenDataGridColumn TItem="GCodeFileDetails" Property="filename" Title="GCode File Name" Frozen="true" Width="140px"/>
            <RadzenDataGridColumn TItem="GCodeFileDetails" Property="size" Title="Size" Width="140px">
                <Template Context="data">
                    <div>@(data.size / 1000) KB</div>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="GCodeFileDetails" Property="modified" Title="Last Modified" Width="200px">
                <Template Context="data">
                    <div>@(DateTime.UnixEpoch.AddSeconds(data.modified))</div>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}

@code {

    private List<GCodeFileDetails> GCodeFiles { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
        await base.OnInitializedAsync();
    }

    private async Task RefreshData()
    {
        GCodeFiles.Clear();
        try
        {
            var gcodeTempList = (await Api.GetFiles()).result;
            foreach (var gcodeFile in gcodeTempList)
            {
                var detailedGcodeFile = await Api.GetFileDetails(gcodeFile.path);
                GCodeFiles.Add(detailedGcodeFile.result);
            }
            GCodeFiles.Sort((a, b) => b.modified.CompareTo(a.modified));

            Toast.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Detail = $"Loaded {GCodeFiles.Count} files",
                Summary = "Success",
                Duration = 7000
            });
        }

        catch (Exception)
        {
        }
    }

    private async Task ShowInlineDialog(GCodeFileDetails file)
    {
        var result = await DialogService.OpenAsync("Print File", ds =>
            @<FileDetails File="@file"
                          OnStartPrint="async () => { ds.Close(true); await OnPrintFile(file);}"
                          OnCancel="() => ds.Close(false)">
            </FileDetails>, new DialogOptions() { Width = "50%", Height = "60%" });
    }

    private async Task OnPrintFile(GCodeFileDetails file)
    {
        try
        {
            var result = await Api.PrintFile(file.filename);
            Toast.Notify(new NotificationMessage
            {
                Severity = result ? NotificationSeverity.Success : NotificationSeverity.Error,
                Detail = result ? "Print Started" : "Failed to start print",
                Summary = result ? "Success" : "Error",
                Duration = 7000
            });
        }

        catch (Exception)
        {
        }
    }

}