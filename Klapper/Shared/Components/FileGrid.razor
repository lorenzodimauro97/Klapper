@using Klapper.Data
@using Klapper.Classes
@inject MoonrakerApiService Api
@inject NotificationService Toast
@inject DialogService DialogService

<RadzenButton Text="Refresh" Click="@RefreshData" Style="margin-bottom: 10px;"/>
<RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" AllowSorting="true" so
                Data="@_gCodeFiles" TItem="GCodeFile" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" RowSelect="ShowInlineDialog">
    <Columns>
        <RadzenDataGridColumn TItem="GCodeFile" Property="path" Title="GCode File Name" Frozen="true" Width="140px"/>
        <RadzenDataGridColumn TItem="GCodeFile" Property="size" Title="Size" Width="140px">
            <Template Context="data">
                <div>@(data.size / 1000) KB</div>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="GCodeFile" Property="modified" Title="Last Modified" Width="200px">
            <Template Context="data">
                <div>@(DateTime.UnixEpoch.AddSeconds(data.modified))</div>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="GCodeFile" Property="permissions" Title="System Permissions" Width="100px"/>
    </Columns>
</RadzenDataGrid>

@code {

    private List<GCodeFile> _gCodeFiles;

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
        await base.OnInitializedAsync();
    }

    private async Task RefreshData()
    {
        try
        {
            _gCodeFiles = (await Api.GetFiles()).result;
            _gCodeFiles.Sort((a, b) => b.modified.CompareTo(a.modified));
        }

        catch (Exception)
        {
        }
    }
    
    private async Task ShowInlineDialog(GCodeFile file)
    {
        var result = await DialogService.OpenAsync("Print File", ds =>
            @<div>
                <p class="mb-4">Print <b>@file.path</b>?</p>
                <div class="row">
                    <div class="col">
                        <RadzenButton Text="Ok" Click="async () => { ds.Close(true); await OnPrintFile(file);}" Class="mr-1" Style="width: 80px;" />
                        <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Secondary" Class="mr-1 float-right" />
                    
                    </div>
                </div>
            </div>);
    
    }
    
    private async Task OnPrintFile(GCodeFile file)
    {
        try
        {
            var result = await Api.PrintFile(file.path);
            Toast.Notify(new NotificationMessage
            {
                Severity = result ? NotificationSeverity.Success : NotificationSeverity.Error,
                Detail = result ? "Print Started" : "Failed to start print",
                Summary = result ? "Success" : "Error",
                Duration = 7000
            });
        }

        catch (Exception)
        {
        }
    }
}