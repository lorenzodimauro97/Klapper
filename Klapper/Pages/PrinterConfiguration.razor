@page "/PrinterConfiguration"
@using Klapper.Data
@using Klapper.Classes
@using System.Text
@using Klapper.Shared.Components.File
@inject MoonrakerApiService Api
@inject NotificationService Toast
@inject DialogService DialogService

<PageTitle>Klapper - Printer Configuration</PageTitle>

<FileCrudOperations
    ButtonConfiguration="1"
    DisableCrudButtons="SelectedFile == null"
    DisableRefreshButton="IsRefreshingData"
    DisableUploadButton="IsUploading"
    OnLaunchPrintDialog="async () => await ShowEditFileDialog()"
    OnDeleteFileDialog="async () => await DeleteFile()"
    RefreshData="async () => await RefreshData()"
    OnUpload="async upload => await UploadFiles(upload, false)"/>
<div class="row pb-4">
    @if (Files?.Count > 0)
    {
        <RadzenDataGrid AllowFiltering="true" AllowPaging="true" PageSize="4" FilterMode="FilterMode.SimpleWithMenu" AllowSorting="true" Data="@Files" TItem="GCodeFile" RowSelect="SelectGCodeFile">
            <Columns>
                <RadzenDataGridColumn TItem="GCodeFile" Property="path" Title="GCode File Name" Frozen="true" Width="140px"/>
                <RadzenDataGridColumn TItem="GCodeFile" Property="size" Title="Size" Width="140px">
                    <Template Context="data">
                        <div>@(data.size / 1000) KB</div>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="GCodeFile" Property="modified" Title="Last Modified" Width="200px">
                    <Template Context="data">
                        <div>@(DateTime.UnixEpoch.AddSeconds(data.modified))</div>
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    }
</div>

@if (ConfigurationClass != null)
{
    <div class="row pb-2">
        <div class="col-md-2">
            <h2>EZ Configurator</h2>
        </div>
        <div class="col">
            <FileSave RestartPrinter="ConfigurationClass.RestartPrinterOnSave" OnSave="UpdateConfiguration"></FileSave>
        </div>
    </div>

    <div class="row">
        @foreach (var section in ConfigurationClass.Sections)
        {
            var rows = section.Rows;

            if (rows.Count == 0) continue;

            <h3>Section "@(section.Title)"</h3>
            <div class="row pb-2">
                <RadzenDataGrid AllowSorting="true" Data="@rows" TItem="ConfigurationRow">
                    <Columns>
                        <RadzenDataGridColumn TItem="ConfigurationRow" Property="Description" Title="Description"/>
                        <RadzenDataGridColumn TItem="ConfigurationRow" Property="Value" Title="Value">
                            <Template Context="row">
                                <RadzenTextArea Value="@row.Value"
                                                Change="updatedRow => UpdateRow(row, updatedRow)" Class="w-100"/>
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </div>
        }
    </div>
}

@code {

    private List<GCodeFile> Files { get; set; } = new();

    private GCodeFile SelectedFile { get; set; }

    private bool IsRefreshingData { get; set; }

    public bool IsUploading { get; set; }

    private Configuration ConfigurationClass { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
        ConfigurationClass = new Configuration(await GetConfiguration("printer.cfg"));

        await base.OnInitializedAsync();
    }

    private async Task RefreshData()
    {
        IsRefreshingData = true;
        SelectedFile = null;

        var isReloadingData = Files.Count > 0;

        Files.Clear();
        try
        {
            Files = (await Api.GetFiles("config")).result;
            Files.Sort((a, b) => b.modified.CompareTo(a.modified));

            if (isReloadingData) ToastNotification.Notificate(Toast, true, $"Loaded {Files.Count} files");
        }

        catch (Exception ex)
        {
            ToastNotification.Notificate(Toast, false, badMessage: $"Error! {ex.Message}");
        }
        finally
        {
            IsRefreshingData = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task SelectGCodeFile(GCodeFile file)
    {
        SelectedFile = file;
    }

    private async Task<string> GetConfiguration(string path)
    {
        var detailedFile = await Api.GetFile(path, "config");
        return Encoding.UTF8.GetString(detailedFile);
    }

    private async Task ShowEditFileDialog()
    {
        var configuration = await GetConfiguration(SelectedFile.path);
        const string root = "config";

        var result = await DialogService.OpenAsync("Edit File", ds =>
            @<FileEditor Content="@configuration"
                         OnSave="async (file, restart) => { ds.Close(true); await UploadFiles(Encoding.UTF8.GetBytes(file), SelectedFile.path, root, restart);}">
            </FileEditor>, new DialogOptions { Width = "90%", Height = "90%" });
    }

    private async Task DeleteFile()
    {
        try
        {
            var result = await Api.DeleteFile(SelectedFile.path, "config");
            ToastNotification.Notificate(Toast, result.Item1, $"{SelectedFile.path} Deleted", $"Failed to delete {SelectedFile.path}");

            if (result.Item1) await RefreshData();
        }

        catch (Exception)
        {
        }
    }

    private async Task UploadFiles(InputFileChangeEventArgs e, bool restart)
    {
        var files = e.GetMultipleFiles();

        if (files.Count == 0) return;

        IsUploading = true;

        foreach (var file in files)
        {
            if (file == null) continue;

            await using var ms = file.OpenReadStream(file.Size);

            var buffer = new byte[file.Size];

            await ms.ReadAsync(buffer);

            await UploadFiles(buffer, file.Name, "config", restart);
        }

        await RefreshData();

        IsUploading = false;
    }

    private async Task UploadFiles(byte[] getBytes, string fileName, string root, bool restart)
    {
        var result = await Api.UploadFile(getBytes, fileName, root);
        ToastNotification.Notificate(Toast, result.Item1, $"{fileName} Uploaded", $"Failed to Upload {fileName}, Error: {result.Item2}");
        if (restart) await Api.RunGCode(SpecialGCodeCommands.FirmwareRestart);
    }

    private void UpdateRow(ConfigurationRow row, string updatedRow)
    {
        ConfigurationClass.UpdateConfiguration(row, updatedRow);
        row.Value = updatedRow;
        ToastNotification.Notificate(Toast, true, goodMessage: "Config changed successfully! Press the SAVE button to save the configuration");
    }

    private async void UpdateConfiguration(bool restart)
    {
        await UploadFiles(Encoding.UTF8.GetBytes(ConfigurationClass.ConfigurationString), "printer.cfg", "config", restart);
    }

}