@page "/"
@using Klapper.Data
@using Klapper.Shared.Components
@using Klapper.Shared.Components.Status
@using Klapper.Shared.Components.File
@using System.Timers
@inject MoonrakerApiService Api
@inject PrinterStatusService StatusService

<PageTitle>Index</PageTitle>

@if (StatusService.KlipperIsRunning && StatusService.KlippyIsReady)
{
    <PrinterStatus OnPausePrint="async () => { await Api.PauseCancelResumePrint(0); }"
                   OnCancelPrint="async () => { await Api.PauseCancelResumePrint(1); }"
                   OnResumePrint="async () => { await Api.PauseCancelResumePrint(2); }"></PrinterStatus>

    <PrinterControls MaxExtrusion="300"></PrinterControls>
    
    @if (Sensors != null)
{
    <div class="border p-3 mt-4">

        <div class="row pb-2">
            <h2 class="text-primary">Heaters And Sensors</h2>
        </div>

        @foreach (var heater in Sensors)
        {
            <div style="display:inline-block; padding: 20px">
                <ProductCard @ref="HeaterComponent" Name=@heater></ProductCard>
            </div>
        }

        <TemperatureChart Sensors="_heaterComponents"></TemperatureChart>

    </div>
}
    @if (true)
    {
        <div class="border p-3 mt-4">

            <div class="row pb-2">
                <h2 class="text-primary">Files</h2>
            </div>
            <FileGrid></FileGrid>
        </div>
        
        <div class="border p-3 mt-4">

            <div class="row">
                <h2 class="text-primary">Terminal</h2>
            </div>
            <TerminalLogger></TerminalLogger>
        </div>
    }
}

@code
{
    bool KlipperIsInitialized { get; set; }
    List<string> Heaters { get; set; }
    private readonly List<ProductCard> _heaterComponents = new();

    public ProductCard HeaterComponent
    {
        set => _heaterComponents.Add(value);
    }

    List<string> Sensors { get; set; }

    protected override async Task OnInitializedAsync()
    {
        SetKlipperStatusTimer();

        await base.OnInitializedAsync();
    }

    private void SetKlipperStatusTimer()
    {
        var timer = new Timer(1000);
        timer.Elapsed += async (sender, args) =>
        {
            await CheckKlipperStatus();
            await InvokeAsync(StateHasChanged);
        };
        timer.AutoReset = true;
        timer.Enabled = true;
    }

    private async Task CheckKlipperStatus()
    {

        if (StatusService.KlipperIsRunning && !KlipperIsInitialized)
        {
            await InitializeKlipperComponents();
        }
    }

    private async Task InitializeKlipperComponents()
    {
        var queryList = await Api.GetQueryableObjects("heaters");

        Heaters = queryList.result.status.heaters.available_heaters;
        Sensors = queryList.result.status.heaters.available_sensors;

        KlipperIsInitialized = true;
    }
}