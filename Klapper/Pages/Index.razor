@page "/"
@using Klapper.Data
@using Klapper.Shared.Components
@using Klapper.Shared.Components.Status
@using Klapper.Shared.Components.File
@using System.Timers
@inject MoonrakerApiService Api
@inject PrinterStatusService StatusService

<PageTitle>Index</PageTitle>

<RadzenTabs TabPosition="@TabPosition.Top" RenderMode="TabRenderMode.Client">
    <Tabs>
        <RadzenTabsItem Icon="control_camera" Text="Status & Control">
            @if (StatusService.KlipperIsRunning && StatusService.KlippyIsReady)
            {
                <PrinterStatus OnPausePrint="async () => { await Api.PauseCancelResumePrint(0); }"
                               OnCancelPrint="async () => { await Api.PauseCancelResumePrint(1); }"
                               OnResumePrint="async () => { await Api.PauseCancelResumePrint(2); }"
                               OnClearPrint="async () => {await Api.RunGCode(Classes.SpecialGCodeCommands.ClearSDCard);}">
                </PrinterStatus>

                <PrinterControls MaxExtrusion="300"></PrinterControls>
            }
        </RadzenTabsItem>
        <RadzenTabsItem Icon="thermostat" Text="Temperature">
            @if (StatusService.KlipperIsRunning && StatusService.KlippyIsReady && Sensors != null)
            {
                @foreach (var heater in Sensors)
                    {
                        <div style="display:inline-block; padding: 20px">
                            <ProductCard @ref="HeaterComponent" Name=@heater></ProductCard>
                        </div>
                    }

                    <TemperatureChart Sensors="_heaterComponents"></TemperatureChart>
            }
        </RadzenTabsItem>
        <RadzenTabsItem Icon="insert_drive_file" Text="Files">
            @if (StatusService.KlipperIsRunning && StatusService.KlippyIsReady)
            {
                <FileGrid></FileGrid>
            }
        </RadzenTabsItem>
        <RadzenTabsItem Icon="terminal" Text="Terminal">
            @if (StatusService.KlipperIsRunning && StatusService.KlippyIsReady)
            {
                <TerminalLogger></TerminalLogger>
            }
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>


@code
{
    private bool KlipperIsInitialized { get; set; }
    List<string> Heaters { get; set; }
    private readonly List<ProductCard> _heaterComponents = new();

    public ProductCard HeaterComponent
    {
        set => _heaterComponents.Add(value);
    }

    List<string> Sensors { get; set; }

    protected override async Task OnInitializedAsync()
    {
        SetKlipperStatusTimer();

        await base.OnInitializedAsync();
    }

    private void SetKlipperStatusTimer()
    {
        var timer = new Timer(1000);
        timer.Elapsed += async (sender, args) =>
        {
            await CheckKlipperStatus();
            await InvokeAsync(StateHasChanged);
        };
        timer.AutoReset = true;
        timer.Enabled = true;
    }

    private async Task CheckKlipperStatus()
    {
        if (StatusService.KlipperIsRunning && !KlipperIsInitialized)
        {
            await InitializeKlipperComponents();
        }
    }

    private async Task InitializeKlipperComponents()
    {
        var queryList = await Api.GetQueryableObjects("heaters");

        Heaters = queryList.result.status.heaters.available_heaters;
        Sensors = queryList.result.status.heaters.available_sensors;

        KlipperIsInitialized = true;
    }

}