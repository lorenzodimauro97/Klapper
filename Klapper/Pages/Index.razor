@page "/"
@using Klapper.Data
@using Klapper.Pages.IndexComponents
@using PSC.Blazor.Components.BrowserDetect
@using Klapper.Shared.Components
@using System.Timers
@using Klapper.Classes
@inject MoonrakerApiService Api
@inject PrinterStatusService StatusService

@if (StatusService.PrinterIsPrinting)
{
    <PageTitle>Printing - @StatusService.PrinterStatus.status.virtual_sdcard.GetProgress%</PageTitle>
}
else
{
    <PageTitle>Klapper - Index</PageTitle>

}
<BrowserDetect @bind-BrowserInfo="@Info"/>

@if (StatusService.KlipperIsRunning && StatusService.PrinterStatus != null)
{
    if (StatusService.KlippyIsReady)
    {
        if (Info != null && (bool)Info.IsMobile)
        {
            <MobileIndex HeaterComponents="_heaterComponents" Sensors="Sensors"></MobileIndex>
        }
        else
        {
            <DesktopIndex HeaterComponents="_heaterComponents" Sensors="Sensors"></DesktopIndex>
        }
    }
    else
    {
        <KlippyError></KlippyError>
    }
}
else
{
    @if (_firstInitialization)
    {
        <row class="text-center h-100">
            <div class="col-sm-12 my-auto">
                <h2>
                    Initializing Klapper on @Api.BaseUrl...
                </h2>
            </div>
        </row>
    }
    else if(!StatusService.KlipperIsRunning)
    {
        <row class="text-center h-100">
            <div class="col-sm-12 my-auto">
                <h2 >
                    Connection Error
                </h2 >
                <h4 >
                    It seems Klapper can't connect to Moonraker's Address(Currently @Api.BaseUrl).
                </h4 >
                <br/>
                <h4>
                    Care to check that everything's alright ?
                </h4>
            </div>
        </row>
    }
}

@code
{

    private BrowserInfo? Info { get; set; }
    private bool _firstInitialization = true;
    List<string>? Heaters { get; set; }
    private readonly List<ProductCard> _heaterComponents = new();

    public ProductCard HeaterComponent
    {
        set => _heaterComponents.Add(value);
    }

    private List<string>? Sensors { get; set; }

    protected override async Task OnInitializedAsync()
    {
        SetKlipperStatusTimer();

        await base.OnInitializedAsync();
    }

    private void SetKlipperStatusTimer()
    {
        var timer = new Timer(1000);
        timer.Elapsed += async (_, _) =>
        {
            await InitializeKlipperComponents();
            await InvokeAsync(StateHasChanged);
            if (StatusService.KlipperIsRunning) timer.Stop();
            timer.Start();
        };
        timer.AutoReset = false;
        timer.Enabled = true;
    }

    private async Task InitializeKlipperComponents()
    {
        var queryList = await Api.GetObject<MoonrakerQueryResultObject>("heaters", false);

        if (queryList != null)
        {
            Heaters = queryList.result.status.heaters.available_heaters;
            Sensors = queryList.result.status.heaters.available_sensors;

            _firstInitialization = false;
        }
    }
}